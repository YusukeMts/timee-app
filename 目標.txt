目標：Timeeのような人材紹介のマッチングシステムを作る。以下のようなスプリントに分けて段階的に進めていく。Sprint 1: 基盤構築スプリント?? ゴール: ユーザーがアプリに登録し、自分のプロフィールを作成できる。* ? 開発タスク: o バックエンド: ユーザー登録、ログインAPIを実装します。パスワードは必ずハッシュ化してデータベースに保存します。o フロントエンド (アプリ): Figmaのデザインに基づき、以下画面を構築し、APIと接続します。 * 新規登録画面* ログイン画面* ワーカーのプロフィール登録・編集画面* このスプリント終了時には、テスト用アプリで実際にユーザー登録ができる状態を目指します。### Sprint 2: 「しごと」スプリント ?? ゴール: 事業者が求人を投稿でき、ワーカーがその一覧をアプリで見ることができる。* ? 開発タスク: o バックエンド: 求人(jobs)、店舗(shops)テーブルをDBに作成します。求人投稿API、求人一覧取得APIを実装します。o フロントエンド (アプリ): * 事業者向けの求人投稿画面を構築します。* ワーカー向けの求人一覧画面、求人詳細画面を構築し、APIから取得したデータを表示させます。* このスプリント終了時には、架空の求人データがアプリにリスト表示される状態を目指します。### Sprint 3: 「マッチング」スプリント ?? ゴール: ワーカーが仕事に応募し、事業者が応募者を確認できる。* ? 開発タスク: o バックエンド: 応募(applications)テーブルをDBに作成します。求人応募API、事業者向けの応募者一覧取得APIを実装します。o フロントエンド (アプリ): * 求人詳細画面に「応募する」ボタンを設置し、応募APIを連携させます。* 事業者向けに、自店舗の求人への応募者プロフィール（評価や研修ラベル含む）を確認できる画面を構築します。* このスプリントで、サービスのコアとなるマッチングのサイクルが一通り繋がります。### Sprint 4: 「信頼と完了」スプリント ?? ゴール: 業務の完了を記録し、相互評価と研修機能という「信頼性」の基盤を実装する。* ? 開発タスク: o バックエンド: 評価(ratings)、研修(trainings)テーブルをDBに作成。QRコード検証API、評価投稿APIを実装します。o フロントエンド (アプリ): * 業務開始/終了のためのQRコード表示・読み取り画面を実装します。* シンプルな研修動画の視聴画面を実装します。* 業務完了後に、ワーカーと事業者が相互評価できる画面を実装します。* このスプリントで、計画していたMVPの全機能が実装完了となります。